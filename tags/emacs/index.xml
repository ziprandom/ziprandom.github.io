<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Emacs on random comments</title>
    <link>http://ziprandom.github.io/tags/emacs/</link>
    <description>Recent content in Emacs on random comments</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 28 Apr 2016 16:00:00 -0300</lastBuildDate>
    <atom:link href="http://ziprandom.github.io/tags/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Crystal LLVM IR API</title>
      <link>http://ziprandom.github.io/blog/crystal-lang-llvm-api/</link>
      <pubDate>Thu, 28 Apr 2016 16:00:00 -0300</pubDate>
      
      <guid>http://ziprandom.github.io/blog/crystal-lang-llvm-api/</guid>
      <description>&lt;p&gt;Using crystals llvm bindings to create an LLVM IR for the simple addition example.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  require &amp;quot;llvm&amp;quot;

  LLVM.init_x86
  LLVM::Module.new(&amp;quot;main&amp;quot;).tap do | main_module |          # ; ModuleID = &#39;main&#39;
    main_module.functions.add(                             # define i32 @main() {
      &amp;quot;main&amp;quot;,
      Array.new(0, LLVM::Int32),
      LLVM::Int32
    ).basic_blocks.append &amp;quot;entry&amp;quot; do |builder|             # entry:
      a = builder.alloca(LLVM::Int32,&amp;quot;a&amp;quot;)                  #  %a = alloca i32
      b = builder.alloca(LLVM::Int32,&amp;quot;b&amp;quot;)                  #  %b = alloca i32
      builder.store(LLVM.int(LLVM::Int32, 40), a)          #  store i32 40, i32* %a
      builder.store(LLVM.int(LLVM::Int32, 6), b)           #  store i32 6, i32* %b
      bval = builder.load(a, &amp;quot;val_a&amp;quot;)                      #  %val_a = load i32* %a
      aval = builder.load(b, &amp;quot;val_b&amp;quot;)                      #  %val_b = load i32* %b
      result = builder.add(aval, bval, &amp;quot;ab_val&amp;quot;)           #  %ab_val = add i32 %val_b, %val_a
      builder.ret result                                   #  ret i32 %ab_val
    end                                                    # }
  end.tap(&amp;amp;.dump).tap(&amp;amp;.verify).tap do | main_module |
    # execute in llvm
    engine = LLVM::JITCompiler.new( main_module)
    result = engine.run_function(
      main_module.functions[&amp;quot;main&amp;quot;],
      [] of LLVM::GenericValue
    )
    pp result.to_i
  end.tap do | main_module |
    # generate bit code
    LibLLVM.write_bitcode_to_file(
      main_module, &amp;quot;./out.bc&amp;quot;
    )
    `llc-3.6 -filetype=obj out.bc`
    `gcc -o out out.o`
    puts &amp;quot;wrote program to out\n\n&amp;quot;
    puts &amp;quot;run with: &#39;./out&#39;\n\n&amp;quot;
    puts &amp;quot;doesn&#39;t have a print command\n\n&amp;quot;
    puts &amp;quot;see result with: &#39;echo $?&#39;\n\n&amp;quot;
  end
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Org-Mode Powered AngularJS Boilerplate</title>
      <link>http://ziprandom.github.io/blog/angular-org-mode/</link>
      <pubDate>Mon, 04 Nov 2013 16:00:00 -0300</pubDate>
      
      <guid>http://ziprandom.github.io/blog/angular-org-mode/</guid>
      <description>

&lt;p&gt;This is my custom angular.js boilerplate Setup based on Emacs&amp;rsquo;s Org Mode
and it´s impressive tangle functionality. You can load this page´s org
source code in Emacs and start playing around with angular.&lt;/p&gt;

&lt;p&gt;After opening the File in an emacs Buffer the elisp source block in the
post-processing section has to be evaluated ( C-x C-e after the last
parenthesis ) for coffee to be set up correctly.&lt;/p&gt;

&lt;h3 id=&#34;1-requirements&#34;&gt;1 Requirements&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;the coffee script compiler (coffee command line tool to translate
coffe-script into java-script)&lt;/li&gt;
&lt;li&gt;Emacs 24&lt;/li&gt;
&lt;li&gt;org-mode (via M-x install-package inside Emacs)&lt;/li&gt;
&lt;li&gt;coffee-mode (via M-x install-package)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2-creating-the-dummy&#34;&gt;2 Creating the Dummy&lt;/h3&gt;

&lt;p&gt;in this org-files buffer run the command: M-x org-bable-tangleis creates
a www directory inside the org-files location with these files:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;index.html&lt;/li&gt;
&lt;li&gt;project.coffee&lt;/li&gt;
&lt;li&gt;project.js&lt;/li&gt;
&lt;li&gt;css/style.css&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;and tries to open the index.html in your browser. Now you can try out &lt;a href=&#34;http://ziprandom.github.io/stuff/www/index.html&#34;&gt;a
very basic angular.js example&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&#34;3-editing-the-code&#34;&gt;3 Editing the code&lt;/h3&gt;

&lt;p&gt;You can navigate inside any of the code-blocks below and alter it´s
contents. As soon as your finished run M-x org-bable-tangle again to
export the source-code files. You can edit each code block in a separate
buffer with the languages major mode activated by pressing C-c &amp;lsquo; with
your cursor placed inside the code-block.&lt;/p&gt;

&lt;h3 id=&#34;4-source-code&#34;&gt;4 Source Code&lt;/h3&gt;

&lt;h4 id=&#34;4-1-post-processing-coffee-js&#34;&gt;4.1 Post-Processing (coffee -&amp;gt; js)&lt;/h4&gt;

&lt;p&gt;This must be evaluated before the first tangle export in order to setup
automatic coffe-script compilation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-commonlisp&#34;&gt;  (add-hook &#39;org-babel-post-tangle-hook
            (
             lambda ()
                    (setq coffee-command &amp;quot;/usr/bin/coffee&amp;quot;)
                    (coffee-compile-file)

                    (browse-url (concat
                                 &amp;quot;file:&amp;quot; (file-name-directory buffer-file-name)
                                 &amp;quot;index.html&amp;quot;))
                    )
            )
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-2-html-template&#34;&gt;4.2 Html Template&lt;/h4&gt;

&lt;p&gt;The index.html associates the &amp;lt;html&amp;gt; tag with the overall app (angular
module) and the &amp;lt;body&amp;gt; tag with the MainCtrl. This makes the \$scope
variables (which includes functions) available inside the &amp;lt;body&amp;gt; tag.
The &lt;strong&gt;ng-bind&lt;/strong&gt; attribute binds the contents of the tag to a variable or
expression ( {{object.age + 1}} ). Note the very usefull ng-repeat
directive. &lt;strong&gt;ng-click&lt;/strong&gt; evaluates the associated expression upon
clicking. {{ &amp;hellip; }} Expressions are also used to directly map variables
to attributes (id for example). Input fields can be bound to variables
via the &lt;strong&gt;ng-model&lt;/strong&gt; directive.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-commonlisp&#34;&gt;  &amp;lt;!doctype html&amp;gt;
  &amp;lt;html ng-app=&amp;quot;app&amp;quot;&amp;gt;
    &amp;lt;head&amp;gt;
      &amp;lt;link rel=&amp;quot;stylesheet&amp;quot; href=&amp;quot;css/style.css&amp;quot;&amp;gt;
      &amp;lt;script src=&amp;quot;http://ajax.googleapis.com/ajax/libs/jquery/2.0.0/jquery.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&amp;quot;https://ajax.googleapis.com/ajax/libs/angularjs/1.0.8/angular.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&amp;quot;http://code.angularjs.org/1.0.8/angular-sanitize.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
      &amp;lt;script src=&amp;quot;project.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;/head&amp;gt;
    &amp;lt;body ng-controller=&amp;quot;MainCtrl&amp;quot;&amp;gt;
      &amp;lt;div id=&amp;quot;table&amp;quot;&amp;gt;
        Click on the table headings for sorting.
        &amp;lt;table class=&amp;quot;table-body&amp;quot;&amp;gt;
          &amp;lt;tr&amp;gt;
            &amp;lt;th&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot; ng-class=&amp;quot;{bold: sortVar == &#39;name&#39;}&amp;quot; ng-click=&amp;quot;sortVar = &#39;name&#39;&amp;quot;&amp;gt;Name&amp;lt;/a&amp;gt;&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot; ng-class=&amp;quot;{bold: sortVar == &#39;age&#39;}&amp;quot; ng-click=&amp;quot;sortVar = &#39;age&#39;&amp;quot;&amp;gt;Age&amp;lt;/a&amp;gt;&amp;lt;/th&amp;gt;
            &amp;lt;th&amp;gt;&amp;lt;a href=&amp;quot;#&amp;quot; ng-class=&amp;quot;{bold: sortVar == &#39;email&#39;}&amp;quot; ng-click=&amp;quot;sortVar = &#39;email&#39;&amp;quot;&amp;gt;Email&amp;lt;/a&amp;gt;&amp;lt;/th&amp;gt;
          &amp;lt;/tr&amp;gt;
          &amp;lt;tr ng-repeat=&amp;quot;object in objects | orderBy:sortVar | filter:query&amp;quot; ng-class=&amp;quot;object.name&amp;quot; id=&amp;quot;{{object.email}}&amp;quot;&amp;gt;
            &amp;lt;td ng-bind=&amp;quot;object.name&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
            &amp;lt;td&amp;gt;&amp;lt;span ng-bind=&amp;quot;object.age&amp;quot;&amp;gt;&amp;lt;/span&amp;gt; &amp;lt;a ng-click=&amp;quot;object.age = object.age + 1&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;+&amp;lt;/a&amp;gt;  &amp;lt;a ng-click=&amp;quot;object.age = object.age - 1&amp;quot; href=&amp;quot;#&amp;quot;&amp;gt;-&amp;lt;/a&amp;gt;&amp;lt;/td&amp;gt;

            &amp;lt;td ng-bind=&amp;quot;object.email&amp;quot;&amp;gt;&amp;lt;/td&amp;gt;
          &amp;lt;/tr&amp;gt;
      &amp;lt;/div&amp;gt;
      &amp;lt;br/&amp;gt;
      &amp;lt;div id=&amp;quot;controlls&amp;quot;&amp;gt;
        Filter Table:
        &amp;lt;input type=&amp;quot;text&amp;quot; ng-model=&amp;quot;query&amp;quot; /&amp;gt;
      &amp;lt;/div&amp;gt;
    &amp;lt;/body&amp;gt;
  &amp;lt;/html&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-3-coffee-script-code&#34;&gt;4.3 Coffee Script Code&lt;/h4&gt;

&lt;p&gt;We define an angular.module an load the ngSanitize module (&lt;a href=&#34;http://docs.angularjs.org/api/angular.module&#34;&gt;more on
angular.js modules&lt;/a&gt;) which
could enable us to use the bindHtml directive to &lt;em&gt;securely&lt;/em&gt; bind html
contents to elements (not used in this example).&lt;/p&gt;

&lt;p&gt;Note also the definition of the MainCtrl Controller. Variables, that we
want to be bound into the view have to be children of the \$scope
object. We may update these bindings via \$scope.apply () -&amp;gt;
\$scope.myCustomVar = &amp;ldquo;smth&amp;rdquo;. This is not allways necessary, don´t
remember when exactly it is. Here we also define an array of objects to
iterate over it via the ng-repeat directive in the view.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-coffee&#34;&gt;  # (setq coffee-command &amp;quot;coffee -j project.js&amp;quot;)
  angular.module(&#39;app&#39;, [&#39;ngSanitize&#39;])
  ## Controllers
  @MainCtrl = ($scope, $http) -&amp;gt;
          $scope.sortVar = &#39;name&#39;
          $scope.objects = [
                                  name: &amp;quot;otto&amp;quot;
                                  age: 23
                                  email: &amp;quot;der.otto@nowhe.re&amp;quot;,

                                     name: &amp;quot;fred&amp;quot;
                                     age: 19
                                     email: &amp;quot;man-fred@nowhe.re&amp;quot;,

                                  name: &amp;quot;liza&amp;quot;
                                  age: 27
                                  email: &amp;quot;liza@nowhe.re&amp;quot;,

                                     name: &amp;quot;clara&amp;quot;
                                     age: 26
                                     email: &amp;quot;oclara@nowhe.re&amp;quot;,

                                  name: &amp;quot;mike&amp;quot;
                                  age: 23
                                  email: &amp;quot;mike@nowhe.re&amp;quot;]
          $scope.query = &amp;quot;&amp;quot;
          $scope.clear = () -&amp;gt;
                    $scope.$apply () -&amp;gt;
                            $scope.query = &amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;4-4-style-css&#34;&gt;4.4 Style.css&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-css&#34;&gt;  .bold {
      font-weight: bold;
  }
  a {
      text-decoration: none;
  }
  #table {
      float: left;
  }
  #controlls {
      float: left;
  }
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>